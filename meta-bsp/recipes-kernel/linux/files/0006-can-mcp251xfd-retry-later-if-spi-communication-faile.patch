From 86e2dcf0acdefe6de1d48e23788e065226b415c3 Mon Sep 17 00:00:00 2001
From: Jeroen Hofstee <jhofstee@victronenergy.com>
Date: Tue, 3 Dec 2024 11:38:45 +0100
Subject: [PATCH 6/8] can: mcp251xfd: retry later if spi communication failed

This markes the CAN driver as offline if fatal spi comm errors occur.
It relies on the ms-restart timer being set, to retry again after the
given interval. Note that not all err codes are -EBADMSG, but -ETIMEOUT
can be reported indirectly as well, so schedule a retry on any error,
unless it is known that -EBADMSG can only be reported.

NOTE: probe can still fail / give up due to CRC errors. I doubt there
is a sane way to handle that better from within the driver itself.
---
 .../net/can/spi/mcp251xfd/mcp251xfd-core.c    | 70 ++++++++++++++-----
 1 file changed, 54 insertions(+), 16 deletions(-)

diff --git a/drivers/net/can/spi/mcp251xfd/mcp251xfd-core.c b/drivers/net/can/spi/mcp251xfd/mcp251xfd-core.c
index 13bfec021121..428b734d806a 100644
--- a/drivers/net/can/spi/mcp251xfd/mcp251xfd-core.c
+++ b/drivers/net/can/spi/mcp251xfd/mcp251xfd-core.c
@@ -181,6 +181,27 @@ static int mcp251xfd_clks_and_vdd_disable(const struct mcp251xfd_priv *priv)
 	return 0;
 }
 
+static void mcp251xfd_retry_later(struct mcp251xfd_priv *priv, const char *fmt, ...)
+{
+	struct va_format vaf;
+	va_list args;
+
+	if (priv->can.state == CAN_STATE_BUS_OFF)
+		return;
+
+	va_start(args, fmt);
+	vaf.fmt = fmt;
+	vaf.va = &args;
+	if (priv->ndev)
+		printk(KERN_INFO "retrying later: %s: %pV", netdev_name(priv->ndev), &vaf);
+	else
+		printk(KERN_INFO "retrying later: (NULL net_device): %pV", &vaf);
+	va_end(args);
+
+	priv->failed = true;
+	can_bus_off(priv->ndev);
+}
+
 static inline u8
 mcp251xfd_cmd_prepare_write_reg(const struct mcp251xfd_priv *priv,
 				union mcp251xfd_write_reg_buf *write_reg_buf,
@@ -1065,14 +1086,19 @@ static int mcp251xfd_chip_interrupts_disable(const struct mcp251xfd_priv *priv)
 	return regmap_write(priv->map_reg, MCP251XFD_REG_CRC, 0);
 }
 
+static int __mcp251xfd_chip_stop(struct mcp251xfd_priv *priv)
+{
+	mcp251xfd_chip_interrupts_disable(priv);
+	mcp251xfd_chip_rx_int_disable(priv);
+	return mcp251xfd_chip_set_mode(priv, MCP251XFD_REG_CON_MODE_SLEEP);
+}
+
 static int mcp251xfd_chip_stop(struct mcp251xfd_priv *priv,
 			       const enum can_state state)
 {
 	priv->can.state = state;
 
-	mcp251xfd_chip_interrupts_disable(priv);
-	mcp251xfd_chip_rx_int_disable(priv);
-	return mcp251xfd_chip_set_mode(priv, MCP251XFD_REG_CON_MODE_SLEEP);
+	return __mcp251xfd_chip_stop(priv);
 }
 
 static int mcp251xfd_chip_start(struct mcp251xfd_priv *priv)
@@ -1127,12 +1153,15 @@ static int mcp251xfd_set_mode(struct net_device *ndev, enum can_mode mode)
 	switch (mode) {
 	case CAN_MODE_START:
 		err = mcp251xfd_chip_start(priv);
-		if (err)
+		if (err) {
+			mcp251xfd_retry_later(priv, "mcp251xfd_set_mode failed (%d)\n", err);
 			return err;
+		}
 
 		err = mcp251xfd_chip_interrupts_enable(priv);
 		if (err) {
-			mcp251xfd_chip_stop(priv, CAN_STATE_STOPPED);
+			__mcp251xfd_chip_stop(priv);
+			mcp251xfd_retry_later(priv, "mcp251xfd_set_mode interrupts_enable failed (%d)\n", err);
 			return err;
 		}
 
@@ -2278,10 +2307,14 @@ static irqreturn_t mcp251xfd_irq(int irq, void *dev_id)
 	} while (1);
 
  out_fail:
-	priv->failed = true;
-	netdev_err(priv->ndev, "IRQ handler returned %d (intf=0x%08x).\n",
-		   err, priv->regs_status.intf);
-	mcp251xfd_chip_interrupts_disable(priv);
+	if (err == -EBADMSG) {
+		__mcp251xfd_chip_stop(priv);
+		mcp251xfd_retry_later(priv, "excessive CRC errors in interrupt\n");
+	} else {
+		netdev_err(priv->ndev, "IRQ handler returned %d (intf=0x%08x).\n",
+			   err, priv->regs_status.intf);
+		mcp251xfd_chip_interrupts_disable(priv);
+	}
 
 	return handled;
 }
@@ -2494,8 +2527,11 @@ static int mcp251xfd_open(struct net_device *ndev)
 		goto out_mcp251xfd_ring_free;
 
 	err = mcp251xfd_chip_start(priv);
-	if (err)
-		goto out_transceiver_disable;
+	if (err) {
+		// By marking the bus as off mcp251xfd_set_mode will be called to call
+		// mcp251xfd_chip_start again.
+		mcp251xfd_retry_later(priv, "mcp251xfd_open: chip_start failed (%d)\n", err);
+	}
 
 	can_rx_offload_enable(&priv->offload);
 
@@ -2506,18 +2542,20 @@ static int mcp251xfd_open(struct net_device *ndev)
 		goto out_can_rx_offload_disable;
 
 	err = mcp251xfd_chip_interrupts_enable(priv);
-	if (err)
-		goto out_free_irq;
+	if (err) {
+		mcp251xfd_retry_later(priv, "mcp251xfd_open: interrupts_enable failed (%d)\n", err);
+		//goto out_free_irq;
+	}
 
 	netif_start_queue(ndev);
 
 	return 0;
 
- out_free_irq:
-	free_irq(spi->irq, priv);
+// out_free_irq:
+//	free_irq(spi->irq, priv);
  out_can_rx_offload_disable:
 	can_rx_offload_disable(&priv->offload);
- out_transceiver_disable:
+ //out_transceiver_disable:
 	mcp251xfd_transceiver_disable(priv);
  out_mcp251xfd_ring_free:
 	mcp251xfd_ring_free(priv);
-- 
2.43.0

